import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions as any);
    const s = session as any;
    if (!s?.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { appointmentId } = body;

    if (!appointmentId) {
      return NextResponse.json({ error: 'Missing appointmentId' }, { status: 400 });
    }

    // Get the appointment with all related data
    const appointment = await prisma.appointment.findUnique({
      where: { id: appointmentId },
      include: {
        patient: { include: { user: true } },
        doctor: { include: { user: true } },
        aiSummary: true,
        prescription: { include: { medications: true } }
      }
    });

    if (!appointment) {
      return NextResponse.json({ error: 'Appointment not found' }, { status: 404 });
    }

    if (appointment.status !== 'COMPLETED') {
      return NextResponse.json({ 
        error: 'Appointment must be completed to generate medical record' 
      }, { status: 400 });
    }

    // Check if record already exists
    const existingRecord = await prisma.medicalRecord.findFirst({
      where: {
        patientId: appointment.patientId,
        recordData: { path: ['appointmentId'], equals: appointmentId }
      }
    });

    if (existingRecord) {
      return NextResponse.json({ 
        message: 'Medical record already exists',
        record: existingRecord 
      });
    }

    // Build record content
    const aiSummary = appointment.aiSummary;
    const prescription = appointment.prescription;
    
    let title = `Medical Consultation - ${appointment.doctor.user?.name || 'Doctor'}`;
    let description = appointment.chiefComplaint || 'Medical consultation completed';
    let recordType = 'CONSULTATION';

    // Add AI summary content
    if (aiSummary) {
      if (aiSummary.symptomsList && aiSummary.symptomsList.length > 0) {
        description += '\n\nSymptoms: ' + aiSummary.symptomsList.join(', ');
      }
      if (aiSummary.possibleConditions && aiSummary.possibleConditions.length > 0) {
        description += '\n\nConditions: ' + aiSummary.possibleConditions.join(', ');
        recordType = 'DIAGNOSIS';
      }
      if (aiSummary.preliminaryTreatment) {
        description += '\n\nTreatment: ' + aiSummary.preliminaryTreatment;
      }
    }

    // Add prescription
    if (prescription?.medications?.length > 0) {
      const meds = prescription.medications.map((med: any) => 
        `${med.medicationName} ${med.dosage} ${med.frequency}`
      ).join(', ');
      description += '\n\nPrescription: ' + meds;
    }

    // Create medical record
    const medicalRecord = await prisma.medicalRecord.create({
      data: {
        patientId: appointment.patientId,
        recordType: recordType as any,
        title,
        description,
        recordDate: appointment.scheduledDate,
        createdBy: appointment.doctor.userId,
        recordData: {
          appointmentId: appointment.id,
          referenceId: appointment.referenceId,
          doctorName: appointment.doctor.user?.name,
          specialization: appointment.doctor.specialization,
          aiSummaryId: aiSummary?.id,
          prescriptionId: prescription?.id,
          urgencyLevel: aiSummary?.urgencyLevel,
          confidenceScore: aiSummary?.confidenceScore,
          autoGenerated: true
        },
        attachments: []
      }
    });

    return NextResponse.json({ 
      message: 'Medical record auto-generated successfully',
      record: medicalRecord 
    });

  } catch (error) {
    console.error('Error auto-generating medical record:', error);
    return NextResponse.json({ 
      error: 'Failed to auto-generate medical record'
    }, { status: 500 });
  }
}